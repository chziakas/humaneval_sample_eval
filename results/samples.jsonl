{"task_id": "HumanEval/0", "completion": "    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Running sample tests\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True"}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(\" \", \"\")\n\n    result = []\n    current_group = ''\n    paren_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            if paren_count > 0:\n                current_group += char\n            paren_count += 1\n        elif char == ')':\n            paren_count -= 1\n            current_group += char\n            if paren_count == 0:\n                result.append(current_group)\n                current_group = ''\n\n    return result"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n\n        current_group += char\n\n        if not stack:\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = ''\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
